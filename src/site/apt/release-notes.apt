What's New in Version 3?

  The big changes from the current release (version 2.3.1) to version 3.0 include:

  * <<Full support for Flash 9.>> All the data structures added in Flash and 
  Flash 9 are now supported. The only thing currently missing is support for 
  Actionscript 3 - the DoABC class (similar to the current DoAction class) 
  gives you access to the compiled code however there are no classes that
  represent the individual instructions (byte-codes).

  * <<Interfaces replace abstract classes.>> Originally abstract classes were 
  primarily used for code reuse - MovieObject is a good example which allowed 
  the code for encoding and decoding the header fields (containing the type and 
  length) of each data structure to be reused in most of the classes in the 
  framework. From a design perspective using interfaces results in better code 
  but perhaps more interestingly, avoiding reuse allowed the code for individual 
  classes to be optimised for speed. When an object was encoded a test was 
  performed to see whether the length should be written as a 32-bit integer then 
  after the encoding was complete a test was performed to see whether an 
  overflow error occurred. For small, fixed size classes such as ShowFrame, 
  GotoFrame, etc. this overhead makes no sense at all and while using interfaces 
  forced the code that used to reside in MovieObject to be implemented in each 
  class it allowed the same code to optimised on a per-class basis which should 
  yield significant performance improvements.

  * <<Integer constants are replaced by enums.>> Enums and EnumSets are used 
  wherever possible to replace integer constants - simplify the classes and 
  generally making the code easier to use.

  * <<More singletons and immutable classes.>> State-less classes such as 
  PathsArePostscript, ShowFrame and Actions are now implemented as singletons 
  while the classes that represent simple data structures such as TableIndex, 
  RegisterIndex, Color, Bounds, etc. are now immutable - their state is set only 
  through constructors. One of the main goals for Transform was to allow 
  Flash files to be edited however these basic data types are rarely changed,
  so limiting edits to replacing an existing object does not carry a significant
  cost. There is one major advantage is that create copies of movies gets a lot
  faster as a result. This should see significant improvements in performance 
  for applications that use existing Flash files as templates.

  * <<Better class names.>> In case you had not noticed already the 'FS' 
  prefix on the class names is dropped. Also a number of classes were renamed to
  better match the names used by Adobe in the Flash File Format Specification 
  and make their purpose clearer.

  * <<Less documentation.>> The current class datasheets try and provide a 
  detailed description of the class and how to use it. With the creation of the 
  {{{http://www.flagstonesoftware.com/cookbook/index.html}Cookbook}} which 
  contains an increasing number of working examples the documentation for each 
  class is simplified to try and give a concise summary of what it is. This 
  should result in better quality documentation that is easier to maintain.

  * <<Null is avoided unless an object is optional.>> In version 2, null was 
  often used to represent uninitialised values so that required fields could 
  easily be identified when objects were encoded. This lax policy has been 
  tightened so that null is ONLY used when an object is truly optional e.g. for 
  color and coordinate transforms in Place2. The advantage is a cleaner design 
  that avoid ambiguities when decoding objects.

  * <<New Factories and Service Providers.>> The utilities classes that were 
  used to generates the objects representing images, sounds and text were 
  refactored to follow the Service Provider pattern, see
  {{{http://java.sun.com/docs/books/effective}Joshua Bloch's Effective Java}}. 
  This makes the framework easily extensible allowing new providers to be 
  registered, or existing ones replaced. Factory classes are used for decoding 
  Flash files again allowing existing code to be replaced or performance 
  optimised by leaving classes encoded as binary data.

  * <<More packages.>> The com.flagstone.transform package was split so 
  classes with similar functionality are grouped together into separate 
  packages. While this reduces the learning curve and makes it easier to 
  describe all the functionality supported in Transform the real benefit was in 
  simplifying testing, specifically in managing the large number of unit tests 
  that are now included.
 
